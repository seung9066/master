<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.sgg.auth.mapper.AuthMapper">
    <!-- 목록조회 -->
    <select id="getList" parameterType="map" resultType="resultMap">
        /* com.sgg.auth.mapper.AuthMapper.getList */
        SELECT *
        FROM (
            SELECT ROW_NUMBER() OVER(ORDER BY USER_NM DESC) AS RNUM
                , A1.USER_ID
                , A1.USER_NM
                , (SELECT CD_DTL_NAME
                    FROM SGG_CD_DTL
                    WHERE 1 = 1
                    AND DEL_YN = 'N'
                    AND CD_ID = 'USER_AUTH'
                    AND CD_DTL = A1.USER_AUTH) AS USER_AUTH_NM
                , A1.USER_AUTH
                , A2.TEL_NO
                , A2.EMAIL
                , A2.ZIP
                , A2.CITY
                , A2.ADDR
                , A2.ADDR_DTL
                , A2.GEN
            FROM SGG_USER A1
                , SGG_USER_INFO A2
            WHERE 1 = 1
            AND A1.USER_ID = A2.USER_ID(+)
            <if test="type != null and type != ''">
                AND A1.USER_AUTH = #{type}
            </if>
            <if test="userIdSearch != null and userIdSearch != ''">
                AND A1.USER_ID LIKE '%' || #{userIdSearch} || '%'
            </if>
            <if test="userNmSearch != null and userNmSearch != ''">
                AND A1.USER_NM LIKE '%' || #{userNmSearch} || '%'
            </if>
        )
        WHERE RNUM BETWEEN ((#{page} - 1) * #{row}) + 1 AND #{page} * #{row}
    </select>

    <!-- 목록 수 -->
    <select id="getListCnt" parameterType="map" resultType="int">
        /* com.sgg.auth.mapper.AuthMapper.getListCnt */
        SELECT COUNT(*)
        FROM (
            SELECT A1.USER_ID
                , A1.USER_NM
                , (SELECT CD_DTL_NAME
                    FROM SGG_CD_DTL
                    WHERE 1 = 1
                    AND DEL_YN = 'N'
                    AND CD_ID = 'USER_AUTH'
                    AND CD_DTL = A1.USER_AUTH) AS USER_AUTH_NM
                , A1.USER_AUTH
                , A2.TEL_NO
                , A2.EMAIL
                , A2.ZIP
                , A2.CITY
                , A2.ADDR
                , A2.ADDR_DTL
                , A2.GEN
            FROM SGG_USER A1
                , SGG_USER_INFO A2
            WHERE 1 = 1
            AND A1.USER_ID = A2.USER_ID(+)
            <if test="type != null and type != ''">
                AND A1.USER_AUTH = #{type}
            </if>
            <if test="userIdSearch != null and userIdSearch != ''">
                AND A1.USER_ID LIKE '%' || #{userIdSearch} || '%'
            </if>
            <if test="userNmSearch != null and userNmSearch != ''">
                AND A1.USER_NM LIKE '%' || #{userNmSearch} || '%'
            </if>
        )
    </select>

    <!-- 수정, 등록 -->
    <update id="doSave" parameterType="map">
        /* com.sgg.auth.mapper.AuthMapper.doSave */
        UPDATE SGG_USER
        SET USER_AUTH = #{userAuth}
            , DEL_YN = #{delYn}
        WHERE USER_ID = #{userId}
    </update>

    <!-- 수정, 등록 -->
    <insert id="doSaveInfo" parameterType="map">
        /* com.sgg.auth.mapper.AuthMapper.doSaveInfo */
        MERGE INTO SGG_USER_INFO A1
        USING DUAL
        ON (A1.USER_ID = #{userId})
        WHEN MATCHED THEN
        UPDATE
        SET A1.TEL_NO = #{telNo}
            , A1.EMAIL = #{email}
            , A1.GEN = #{gen}
            , A1.COUNTRY = '대한민국'
            , A1.CITY = #{city}
            , A1.ZIP = #{zip}
            , A1.ADDR = #{addr}
            , A1.ADDR_DTL = #{addrDtl}
            , A1.DEL_YN = #{delYn}
        WHEN NOT MATCHED THEN
        INSERT
        (	A1.USER_ID
            , A1.TEL_NO
            , A1.EMAIL
            , A1.GEN
            , A1.COUNTRY
            , A1.CITY
            , A1.ZIP
            , A1.ADDR
            , A1.ADDR_DTL
            , A1.DEL_YN
        )
        VALUES
        (	#{userId}
            , #{telNo}
            , #{email}
            , #{gen}
            , '대한민국'
            , #{city}
            , #{zip}
            , #{addr}
            , #{addrDtl}
            , 'N'
        )
    </insert>

    <!-- info 삭제 -->
    <delete id="delInfo" parameterType="map">
        /* com.sgg.auth.mapper.AuthMapper.doSaveInfo */
        DELETE FROM SGG_USER_INFO
        WHERE USER_ID = #{userId}
    </delete>

    <!-- 접속 기록 -->
    <select id="logList" parameterType="map" resultType="resultMap">
        /* com.sgg.auth.mapper.AuthMapper.logList */
        SELECT *
        FROM (
            SELECT ROW_NUMBER() OVER(ORDER BY A1.LOG_NO DESC) AS RNUM
                , A1.USER_ID
                , A2.USER_NM
                , A1.LOG_PATH
                , A1.USER_IP
                , A1.LOG_TIME
                , A1.MENU_NAME
            FROM SGG_LOG A1
                , SGG_USER A2
            WHERE 1 = 1
            AND A1.USER_ID = A2.USER_ID
            <if test="userNm != null and userNm != ''">
                AND A2.USER_NM LIKE '%' || #{userNm} || '%'
            </if>
            <if test="userId != null and userId != ''">
                AND A1.USER_ID LIKE '%' || #{userId} || '%'
            </if>
            <if test="logTime != null and logTime != ''">
                AND TRUNC(TO_DATE(TO_CHAR(A1.LOG_TIME, 'YYYYMMDD'), 'YYYYMMDD')) = TRUNC(TO_DATE(TO_CHAR(SYSDATE, 'YYYYMMDD'), 'YYYYMMDD')) - #{logTime}
            </if>
        )
        WHERE RNUM BETWEEN ((#{page} - 1) * #{row}) + 1 AND #{page} * #{row}
    </select>

    <!-- 접속 기록 수 -->
    <select id="logListCnt" parameterType="map" resultType="int">
        /* com.sgg.auth.mapper.AuthMapper.logListCnt */
        SELECT COUNT(*)
        FROM (
            SELECT ROW_NUMBER() OVER(ORDER BY A1.LOG_NO DESC) AS RNUM
                , A1.USER_ID
                , A2.USER_NM
                , A1.LOG_PATH
                , A1.USER_IP
                , A1.LOG_TIME
                , A1.MENU_NAME
            FROM SGG_LOG A1
                , SGG_USER A2
            WHERE 1 = 1
            AND A1.USER_ID = A2.USER_ID
            <if test="userNm != null and userNm != ''">
                AND A2.USER_NM LIKE '%' || #{userNm} || '%'
            </if>
            <if test="userId != null and userId != ''">
                AND A1.USER_ID LIKE '%' || #{userId} || '%'
            </if>
            <if test="logTime != null and logTime != ''">
                AND TRUNC(TO_DATE(TO_CHAR(A1.LOG_TIME, 'YYYYMMDD'), 'YYYYMMDD')) = TRUNC(TO_DATE(TO_CHAR(SYSDATE, 'YYYYMMDD'), 'YYYYMMDD')) - #{logTime}
            </if>
        )
    </select>

    <!-- 메뉴 목록 -->
    <select id="menuList" parameterType="map" resultType="resultMap">
        SELECT CASE WHEN LEVEL = 1 THEN MENU_ID END LEV1
            , CASE WHEN LEVEL = 2 THEN MENU_ID END LEV2
            , MENU_ID
            , MENU_NAME
            , UP_MENU_ID
            , MENU_NO
            , MENU_PATH
            , USER_AUTH
            , DEL_YN
        FROM SGG_MENU a1
        WHERE 1 = 1
        AND USER_AUTH <![CDATA[ <= ]]> '999'
        AND MENU_NO > 0
        START WITH UP_MENU_ID IS NULL
        CONNECT BY UP_MENU_ID = PRIOR MENU_ID
        ORDER SIBLINGS BY MENU_NO
    </select>

    <!-- 저장, 수정 -->
    <insert id="menuSave" parameterType="map">
        MERGE INTO SGG_MENU A1
        USING DUAL
        ON (A1.MENU_ID = #{menuId})
        WHEN MATCHED THEN
        UPDATE
        SET A1.MENU_NAME = #{menuName}
            , A1.UP_MENU_ID = #{upMenuId}
            , A1.MENU_NO = #{menuNo}
            , A1.MENU_PATH = #{menuPath}
            , A1.USER_AUTH = #{userAuth}
            , A1.DEL_YN = #{delYn}
        WHEN NOT MATCHED THEN
        INSERT
        (	A1.MENU_ID
            , A1.MENU_NAME
            , A1.UP_MENU_ID
            , A1.MENU_NO
            , A1.MENU_PATH
            , A1.USER_AUTH
            , A1.DEL_YN
        )
        VALUES
        (	#{menuId}
            , #{menuName}
            , #{upMenuId}
            , #{menuNo}
            , #{menuPath}
            , #{userAuth}
            , #{delYn}
        )
    </insert>
</mapper>